int -> T_Int
whitespace -> T_Whitespace
test_function -> T_Id
( -> T_LP
int -> T_Int
whitespace -> T_Whitespace
a -> T_Id
, -> T_Comma
whitespace -> T_Whitespace
int -> T_Int
whitespace -> T_Whitespace
b -> T_Id
, -> T_Comma
whitespace -> T_Whitespace
bool -> T_Bool
whitespace -> T_Whitespace
c -> T_Id
) -> T_RP
{ -> T_LC
whitespace -> T_Whitespace
// this is a function -> T_Comment
whitespace -> T_Whitespace
if -> T_If
whitespace -> T_Whitespace
( -> T_LP
c -> T_Id
whitespace -> T_Whitespace
== -> T_ROp_E
whitespace -> T_Whitespace
true -> T_True
) -> T_RP
{ -> T_LC
whitespace -> T_Whitespace
return -> T_Return
whitespace -> T_Whitespace
a -> T_Id
+ -> T_AOp_PL
b -> T_Id
; -> T_Semicolon
whitespace -> T_Whitespace
} -> T_RC
whitespace -> T_Whitespace
else -> T_Else
whitespace -> T_Whitespace
{ -> T_LC
whitespace -> T_Whitespace
return -> T_Return
whitespace -> T_Whitespace
a -> T_Id
- -> T_AOp_MN
b -> T_Id
; -> T_Semicolon
whitespace -> T_Whitespace
} -> T_RC
whitespace -> T_Whitespace
} -> T_RC
whitespace -> T_Whitespace
int -> T_Int
whitespace -> T_Whitespace
main -> T_Id
( -> T_LP
) -> T_RP
{ -> T_LC
whitespace -> T_Whitespace
bool -> T_Bool
whitespace -> T_Whitespace
add -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
true -> T_True
; -> T_Semicolon
whitespace -> T_Whitespace
char -> T_Char
whitespace -> T_Whitespace
_assign1 -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
'=' -> T_Character
; -> T_Semicolon
whitespace -> T_Whitespace
char -> T_Char
whitespace -> T_Whitespace
String_1 -> T_Id
[ -> T_LB
] -> T_RB
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
" + " -> T_String
; -> T_Semicolon
whitespace -> T_Whitespace
char -> T_Char
whitespace -> T_Whitespace
String_2 -> T_Id
[ -> T_LB
] -> T_RB
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
" - " -> T_String
; -> T_Semicolon
whitespace -> T_Whitespace
for -> T_For
( -> T_LP
int -> T_Int
whitespace -> T_Whitespace
i -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
0 -> T_Decimal
; -> T_Semicolon
whitespace -> T_Whitespace
i -> T_Id
whitespace -> T_Whitespace
<= -> T_ROp_LE
whitespace -> T_Whitespace
( -> T_LP
+10 -> T_Decimal
whitespace -> T_Whitespace
/ -> T_AOp_DV
whitespace -> T_Whitespace
2 -> T_Decimal
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
i -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
i -> T_Id
whitespace -> T_Whitespace
+ -> T_AOp_PL
whitespace -> T_Whitespace
1 -> T_Decimal
) -> T_RP
{ -> T_LC
whitespace -> T_Whitespace
for -> T_For
whitespace -> T_Whitespace
( -> T_LP
int -> T_Int
whitespace -> T_Whitespace
j -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
0x0 -> T_Hexadecimal
; -> T_Semicolon
whitespace -> T_Whitespace
j -> T_Id
whitespace -> T_Whitespace
!= -> T_ROp_NE
whitespace -> T_Whitespace
( -> T_LP
5 -> T_Decimal
whitespace -> T_Whitespace
* -> T_AOp_ML
whitespace -> T_Whitespace
-1 -> T_Decimal
) -> T_RP
whitespace -> T_Whitespace
; -> T_Semicolon
whitespace -> T_Whitespace
j -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
j -> T_Id
whitespace -> T_Whitespace
- -> T_AOp_MN
whitespace -> T_Whitespace
1 -> T_Decimal
) -> T_RP
{ -> T_LC
whitespace -> T_Whitespace
print -> T_Print
( -> T_LP
i -> T_Id
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
print -> T_Print
( -> T_LP
String_1 -> T_Id
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
print -> T_Print
( -> T_LP
j -> T_Id
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
print -> T_Print
( -> T_LP
_assign1 -> T_Id
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
print -> T_Print
( -> T_LP
test_function -> T_Id
( -> T_LP
i -> T_Id
, -> T_Comma
j -> T_Id
, -> T_Comma
add -> T_Id
) -> T_RP
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
} -> T_RC
whitespace -> T_Whitespace
} -> T_RC
whitespace -> T_Whitespace
add -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
false -> T_False
; -> T_Semicolon
whitespace -> T_Whitespace
for -> T_For
whitespace -> T_Whitespace
( -> T_LP
int -> T_Int
whitespace -> T_Whitespace
i -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
0 -> T_Decimal
; -> T_Semicolon
whitespace -> T_Whitespace
! -> T_LOp_NOT
( -> T_LP
i -> T_Id
whitespace -> T_Whitespace
== -> T_ROp_E
whitespace -> T_Whitespace
+5 -> T_Decimal
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
i -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
i -> T_Id
whitespace -> T_Whitespace
+ -> T_AOp_PL
whitespace -> T_Whitespace
1 -> T_Decimal
) -> T_RP
whitespace -> T_Whitespace
{ -> T_LC
whitespace -> T_Whitespace
for -> T_For
whitespace -> T_Whitespace
( -> T_LP
int -> T_Int
whitespace -> T_Whitespace
j -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
0x0 -> T_Hexadecimal
; -> T_Semicolon
whitespace -> T_Whitespace
j -> T_Id
whitespace -> T_Whitespace
>= -> T_ROp_LE
whitespace -> T_Whitespace
-5 -> T_Decimal
; -> T_Semicolon
whitespace -> T_Whitespace
j -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
j -> T_Id
whitespace -> T_Whitespace
- -> T_AOp_MN
whitespace -> T_Whitespace
1 -> T_Decimal
) -> T_RP
whitespace -> T_Whitespace
{ -> T_LC
whitespace -> T_Whitespace
if -> T_If
( -> T_LP
( -> T_LP
i -> T_Id
whitespace -> T_Whitespace
% -> T_AOp_RM
whitespace -> T_Whitespace
4 -> T_Decimal
) -> T_RP
whitespace -> T_Whitespace
== -> T_ROp_E
whitespace -> T_Whitespace
0 -> T_Decimal
whitespace -> T_Whitespace
|| -> T_LOp_OR
whitespace -> T_Whitespace
( -> T_LP
i -> T_Id
whitespace -> T_Whitespace
% -> T_AOp_RM
whitespace -> T_Whitespace
3 -> T_Decimal
) -> T_RP
whitespace -> T_Whitespace
== -> T_ROp_E
whitespace -> T_Whitespace
0 -> T_Decimal
) -> T_RP
whitespace -> T_Whitespace
continue -> T_Continue
; -> T_Semicolon
whitespace -> T_Whitespace
if -> T_If
( -> T_LP
j -> T_Id
whitespace -> T_Whitespace
< -> T_ROp_L
whitespace -> T_Whitespace
-4 -> T_Decimal
whitespace -> T_Whitespace
&& -> T_LOp_AND
whitespace -> T_Whitespace
i -> T_Id
whitespace -> T_Whitespace
> -> T_ROp_G
whitespace -> T_Whitespace
3 -> T_Decimal
) -> T_RP
whitespace -> T_Whitespace
break -> T_Break
; -> T_Semicolon
whitespace -> T_Whitespace
print -> T_Print
( -> T_LP
i -> T_Id
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
print -> T_Print
( -> T_LP
String_2 -> T_Id
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
print -> T_Print
( -> T_LP
j -> T_Id
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
print -> T_Print
( -> T_LP
_assign1 -> T_Id
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
print -> T_Print
( -> T_LP
test_function -> T_Id
( -> T_LP
i -> T_Id
, -> T_Comma
whitespace -> T_Whitespace
j -> T_Id
, -> T_Comma
whitespace -> T_Whitespace
add -> T_Id
) -> T_RP
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
} -> T_RC
whitespace -> T_Whitespace
} -> T_RC
whitespace -> T_Whitespace
print -> T_Print
( -> T_LP
"this is\" a whole string no other token like '=' or 'else' or even \\\\comment should be recogized" -> T_String
) -> T_RP
; -> T_Semicolon
whitespace -> T_Whitespace
char -> T_Char
whitespace -> T_Whitespace
back -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
'\\' -> T_Character
; -> T_Semicolon
whitespace -> T_Whitespace
char -> T_Char
whitespace -> T_Whitespace
quote -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
'\'' -> T_Character
; -> T_Semicolon
whitespace -> T_Whitespace
int -> T_Int
whitespace -> T_Whitespace
_123 -> T_Id
whitespace -> T_Whitespace
= -> T_Assign
whitespace -> T_Whitespace
0XABCdef1230 -> T_Hexadecimal
; -> T_Semicolon
whitespace -> T_Whitespace
} -> T_RC
