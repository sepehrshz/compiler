int -> T_Int
test_function -> T_Id
( -> T_LP
int -> T_Int
a -> T_Id
, -> T_Comma
int -> T_Int
b -> T_Id
, -> T_Comma
bool -> T_Bool
c -> T_Id
) -> T_RP
{ -> T_LC
// this is a function -> T_Comment
if -> T_If
( -> T_LP
c -> T_Id
== -> T_ROp_E
true -> T_True
) -> T_RP
{ -> T_LC
return -> T_Return
a -> T_Id
+ -> T_AOp_PL
b -> T_Id
; -> T_Semicolon
} -> T_RC
else -> T_Else
{ -> T_LC
return -> T_Return
a -> T_Id
- -> T_AOp_MN
b -> T_Id
; -> T_Semicolon
} -> T_RC
} -> T_RC
int -> T_Int
main -> T_Id
( -> T_LP
) -> T_RP
{ -> T_LC
bool -> T_Bool
add -> T_Id
= -> T_Assign
true -> T_True
; -> T_Semicolon
char -> T_Char
_assign1 -> T_Id
= -> T_Assign
'=' -> T_Character
; -> T_Semicolon
char -> T_Char
String_1 -> T_Id
[ -> T_LB
] -> T_RB
= -> T_Assign
" + " -> T_String
; -> T_Semicolon
char -> T_Char
String_2 -> T_Id
[ -> T_LB
] -> T_RB
= -> T_Assign
" - " -> T_String
; -> T_Semicolon
for -> T_For
( -> T_LP
int -> T_Int
i -> T_Id
= -> T_Assign
0 -> T_Decimal
; -> T_Semicolon
i -> T_Id
<= -> T_ROp_LE
( -> T_LP
+10 -> T_Decimal
/ -> T_AOp_DV
2 -> T_Decimal
) -> T_RP
; -> T_Semicolon
i -> T_Id
= -> T_Assign
i -> T_Id
+ -> T_AOp_PL
1 -> T_Decimal
) -> T_RP
{ -> T_LC
for -> T_For
( -> T_LP
int -> T_Int
j -> T_Id
= -> T_Assign
0x0 -> T_Hexadecimal
; -> T_Semicolon
j -> T_Id
!= -> T_ROp_NE
( -> T_LP
5 -> T_Decimal
* -> T_AOp_ML
-1 -> T_Decimal
) -> T_RP
; -> T_Semicolon
j -> T_Id
= -> T_Assign
j -> T_Id
- -> T_AOp_MN
1 -> T_Decimal
) -> T_RP
{ -> T_LC
print -> T_Print
( -> T_LP
i -> T_Id
) -> T_RP
; -> T_Semicolon
print -> T_Print
( -> T_LP
String_1 -> T_Id
) -> T_RP
; -> T_Semicolon
print -> T_Print
( -> T_LP
j -> T_Id
) -> T_RP
; -> T_Semicolon
print -> T_Print
( -> T_LP
_assign1 -> T_Id
) -> T_RP
; -> T_Semicolon
print -> T_Print
( -> T_LP
test_function -> T_Id
( -> T_LP
i -> T_Id
, -> T_Comma
j -> T_Id
, -> T_Comma
add -> T_Id
) -> T_RP
) -> T_RP
; -> T_Semicolon
} -> T_RC
} -> T_RC
add -> T_Id
= -> T_Assign
false -> T_False
; -> T_Semicolon
for -> T_For
( -> T_LP
int -> T_Int
i -> T_Id
= -> T_Assign
0 -> T_Decimal
; -> T_Semicolon
! -> T_LOp_NOT
( -> T_LP
i -> T_Id
== -> T_ROp_E
+5 -> T_Decimal
) -> T_RP
; -> T_Semicolon
i -> T_Id
= -> T_Assign
i -> T_Id
+ -> T_AOp_PL
1 -> T_Decimal
) -> T_RP
{ -> T_LC
for -> T_For
( -> T_LP
int -> T_Int
j -> T_Id
= -> T_Assign
0x0 -> T_Hexadecimal
; -> T_Semicolon
j -> T_Id
>= -> T_ROp_LE
-5 -> T_Decimal
; -> T_Semicolon
j -> T_Id
= -> T_Assign
j -> T_Id
- -> T_AOp_MN
1 -> T_Decimal
) -> T_RP
{ -> T_LC
if -> T_If
( -> T_LP
( -> T_LP
i -> T_Id
% -> T_AOp_RM
4 -> T_Decimal
) -> T_RP
== -> T_ROp_E
0 -> T_Decimal
|| -> T_LOp_OR
( -> T_LP
i -> T_Id
% -> T_AOp_RM
3 -> T_Decimal
) -> T_RP
== -> T_ROp_E
0 -> T_Decimal
) -> T_RP
continue -> T_Continue
; -> T_Semicolon
if -> T_If
( -> T_LP
j -> T_Id
< -> T_ROp_L
-4 -> T_Decimal
&& -> T_LOp_AND
i -> T_Id
> -> T_ROp_G
3 -> T_Decimal
) -> T_RP
break -> T_Break
; -> T_Semicolon
print -> T_Print
( -> T_LP
i -> T_Id
) -> T_RP
; -> T_Semicolon
print -> T_Print
( -> T_LP
String_2 -> T_Id
) -> T_RP
; -> T_Semicolon
print -> T_Print
( -> T_LP
j -> T_Id
) -> T_RP
; -> T_Semicolon
print -> T_Print
( -> T_LP
_assign1 -> T_Id
) -> T_RP
; -> T_Semicolon
print -> T_Print
( -> T_LP
test_function -> T_Id
( -> T_LP
i -> T_Id
, -> T_Comma
j -> T_Id
, -> T_Comma
add -> T_Id
) -> T_RP
) -> T_RP
; -> T_Semicolon
} -> T_RC
} -> T_RC
print -> T_Print
( -> T_LP
"this is\" a whole string no other token like '=' or 'else' or even \\\\comment should be recogized" -> T_String
) -> T_RP
; -> T_Semicolon
char -> T_Char
back -> T_Id
= -> T_Assign
'\\' -> T_Character
; -> T_Semicolon
char -> T_Char
quote -> T_Id
= -> T_Assign
'\'' -> T_Character
; -> T_Semicolon
int -> T_Int
_123 -> T_Id
= -> T_Assign
0XABCdef1230 -> T_Hexadecimal
; -> T_Semicolon
} -> T_RC
